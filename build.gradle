buildscript {
    repositories {
        if (project.hasProperty("maven") && maven.equals("maven.aliyun.com"))
            maven { url = 'http://maven.aliyun.com/nexus/content/groups/public/' }
        else
            mavenCentral()

        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.+")
        }
    }
}

apply plugin: 'org.springframework.boot'

group = 'com.incarcloud'
version = '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    if (project.hasProperty("maven") && maven.equals("maven.aliyun.com"))
            maven { url = 'http://maven.aliyun.com/nexus/content/groups/public/' }
    else
        mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter:1.5.+"){
        exclude module: "spring-boot-starter-logging"
    }
    compile("org.springframework.boot:spring-boot-starter-log4j2:1.5.+")
    compile("org.mongodb:mongodb-driver-sync:3.8.+")

    compile("com.incarcloud:incar-vault:1.1.1")
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.+'
    compile files("lib/ojdbc8.jar")

    runtime("com.github.jnr:jnr-unixsocket:0.19")

    testImplementation("junit:junit:4.+")
}

task MarkGitVersion{
    doLast{
        def git = "git -C " + projectDir + " "
        def branch = (git + "symbolic-ref --short HEAD").execute().text.trim()
        def rev = (git + "rev-list --count HEAD").execute().text.trim()
        def hash = (git + "rev-parse --short HEAD").execute().text.trim()
        def hash160 = (git + "rev-parse HEAD").execute().text.trim()
        println("\tMark Git Version: " + branch + "." + rev + "@" + hash)

        def javaFile = new File(projectDir, "src/main/java/com/incarcloud/saic/GitVer.jav_").text
        javaFile = javaFile
                .replace("\$branch\$", branch)
                .replace("\$rev\$", rev)
                .replace("\$hash\$", hash)
                .replace("\$hash160\$", hash160)

        def writer = new PrintWriter(new File(projectDir, "src/main/java/com/incarcloud/saic/GitVer.java"))
        writer.print(javaFile)
        writer.close()
    }
}

compileJava{
    dependsOn MarkGitVersion
    options.encoding = "utf-8"
    options.compilerArgs << "-Xlint:unchecked"
    options.compilerArgs << "-Xdiags:verbose"
    options.compilerArgs << "-proc:none"
}

compileTestJava{
    options.encoding = "utf-8"
    options.compilerArgs << "-Xlint:unchecked"
    options.compilerArgs << "-Xdiags:verbose"
}

bootRun{
    systemProperties System.getProperties()
}

test{
    systemProperties System.getProperties()

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }

    if(project.hasProperty("testCaseOnly")) {
        filter {
            includeTestsMatching testCaseOnly
        }
    }
}

defaultTasks "assemble"